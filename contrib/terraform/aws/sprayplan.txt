
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # data.template_file.inventory will be read during apply
  # (config refers to values not yet known)
 <= data "template_file" "inventory"  {
      + id       = (known after apply)
      + rendered = (known after apply)
      + template = <<-EOT
            [all]
            ${connection_strings_master}
            ${connection_strings_node}
            ${connection_strings_etcd}
            ${public_ip_address_bastion}
            
            [bastion]
            ${public_ip_address_bastion}
            
            [kube_control_plane]
            ${list_master}
            
            [kube_node]
            ${list_node}
            
            [etcd]
            ${list_etcd}
            
            [calico_rr]
            
            [k8s_cluster:children]
            kube_node
            kube_control_plane
            calico_rr
            
            [k8s_cluster:vars]
            ${nlb_api_fqdn}
        EOT
      + vars     = {
          + "connection_strings_etcd"   = (known after apply)
          + "connection_strings_master" = (known after apply)
          + "connection_strings_node"   = (known after apply)
          + "list_etcd"                 = (known after apply)
          + "list_master"               = (known after apply)
          + "list_node"                 = (known after apply)
          + "nlb_api_fqdn"              = (known after apply)
          + "public_ip_address_bastion" = (known after apply)
        }
    }

  # aws_instance.bastion-server[0] will be created
  + resource "aws_instance" "bastion-server" {
      + ami                                  = "ami-0498587f552d38597"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.small"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "ss-ps-kubespray-keypair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Cluster"     = "k8s-kubespray"
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-bastion-0"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
          + "Role"        = "bastion-k8s-kubespray-0"
        }
      + tags_all                             = {
          + "Cluster"     = "k8s-kubespray"
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-bastion-0"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
          + "Role"        = "bastion-k8s-kubespray-0"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.k8s-etcd[0] will be created
  + resource "aws_instance" "k8s-etcd" {
      + ami                                  = "ami-0498587f552d38597"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.medium"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "ss-ps-kubespray-keypair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-etcd0"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "etcd"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tags_all                             = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-etcd0"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "etcd"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 50
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.k8s-etcd[1] will be created
  + resource "aws_instance" "k8s-etcd" {
      + ami                                  = "ami-0498587f552d38597"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.medium"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "ss-ps-kubespray-keypair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-etcd1"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "etcd"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tags_all                             = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-etcd1"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "etcd"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 50
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.k8s-etcd[2] will be created
  + resource "aws_instance" "k8s-etcd" {
      + ami                                  = "ami-0498587f552d38597"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.medium"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "ss-ps-kubespray-keypair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-etcd2"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "etcd"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tags_all                             = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-etcd2"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "etcd"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 50
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.k8s-master[0] will be created
  + resource "aws_instance" "k8s-master" {
      + ami                                  = "ami-0498587f552d38597"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + iam_instance_profile                 = "kube_k8s-kubespray_master_profile"
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.medium"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "ss-ps-kubespray-keypair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-master0"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "master"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tags_all                             = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-master0"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "master"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 50
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.k8s-master[1] will be created
  + resource "aws_instance" "k8s-master" {
      + ami                                  = "ami-0498587f552d38597"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + iam_instance_profile                 = "kube_k8s-kubespray_master_profile"
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.medium"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "ss-ps-kubespray-keypair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-master1"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "master"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tags_all                             = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-master1"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "master"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 50
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.k8s-master[2] will be created
  + resource "aws_instance" "k8s-master" {
      + ami                                  = "ami-0498587f552d38597"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + iam_instance_profile                 = "kube_k8s-kubespray_master_profile"
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.medium"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "ss-ps-kubespray-keypair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-master2"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "master"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tags_all                             = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-master2"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "master"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 50
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.k8s-worker[0] will be created
  + resource "aws_instance" "k8s-worker" {
      + ami                                  = "ami-0498587f552d38597"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + iam_instance_profile                 = "kube_k8s-kubespray_node_profile"
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.medium"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "ss-ps-kubespray-keypair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-worker0"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "worker"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tags_all                             = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-worker0"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "worker"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 50
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.k8s-worker[1] will be created
  + resource "aws_instance" "k8s-worker" {
      + ami                                  = "ami-0498587f552d38597"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + iam_instance_profile                 = "kube_k8s-kubespray_node_profile"
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.medium"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "ss-ps-kubespray-keypair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-worker1"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "worker"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tags_all                             = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-worker1"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "worker"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 50
          + volume_type           = (known after apply)
        }
    }

  # aws_instance.k8s-worker[2] will be created
  + resource "aws_instance" "k8s-worker" {
      + ami                                  = "ami-0498587f552d38597"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + iam_instance_profile                 = "kube_k8s-kubespray_node_profile"
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.medium"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "ss-ps-kubespray-keypair"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-worker2"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "worker"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tags_all                             = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-worker2"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "Role"                                = "worker"
          + "kubernetes.io/cluster/k8s-kubespray" = "member"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 50
          + volume_type           = (known after apply)
        }
    }

  # aws_lb_target_group_attachment.tg-attach_master_nodes[0] will be created
  + resource "aws_lb_target_group_attachment" "tg-attach_master_nodes" {
      + id               = (known after apply)
      + target_group_arn = (known after apply)
      + target_id        = (known after apply)
    }

  # aws_lb_target_group_attachment.tg-attach_master_nodes[1] will be created
  + resource "aws_lb_target_group_attachment" "tg-attach_master_nodes" {
      + id               = (known after apply)
      + target_group_arn = (known after apply)
      + target_id        = (known after apply)
    }

  # aws_lb_target_group_attachment.tg-attach_master_nodes[2] will be created
  + resource "aws_lb_target_group_attachment" "tg-attach_master_nodes" {
      + id               = (known after apply)
      + target_group_arn = (known after apply)
      + target_id        = (known after apply)
    }

  # null_resource.inventories will be created
  + resource "null_resource" "inventories" {
      + id       = (known after apply)
      + triggers = (known after apply)
    }

  # module.aws-iam.aws_iam_instance_profile.kube-worker will be created
  + resource "aws_iam_instance_profile" "kube-worker" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "kube_k8s-kubespray_node_profile"
      + path        = "/"
      + role        = "kubernetes-k8s-kubespray-node"
      + tags_all    = (known after apply)
      + unique_id   = (known after apply)
    }

  # module.aws-iam.aws_iam_instance_profile.kube_control_plane will be created
  + resource "aws_iam_instance_profile" "kube_control_plane" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "kube_k8s-kubespray_master_profile"
      + path        = "/"
      + role        = "kubernetes-k8s-kubespray-master"
      + tags_all    = (known after apply)
      + unique_id   = (known after apply)
    }

  # module.aws-iam.aws_iam_role.kube-worker will be created
  + resource "aws_iam_role" "kube-worker" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "kubernetes-k8s-kubespray-node"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.aws-iam.aws_iam_role.kube_control_plane will be created
  + resource "aws_iam_role" "kube_control_plane" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "kubernetes-k8s-kubespray-master"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.aws-iam.aws_iam_role_policy.kube-worker will be created
  + resource "aws_iam_role_policy" "kube-worker" {
      + id     = (known after apply)
      + name   = "kubernetes-k8s-kubespray-node"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = "s3:*"
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:s3:::kubernetes-*",
                        ]
                    },
                  + {
                      + Action   = "ec2:Describe*"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = "ec2:AttachVolume"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = "ec2:DetachVolume"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = [
                          + "route53:*",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "*",
                        ]
                    },
                  + {
                      + Action   = [
                          + "ecr:GetAuthorizationToken",
                          + "ecr:BatchCheckLayerAvailability",
                          + "ecr:GetDownloadUrlForLayer",
                          + "ecr:GetRepositoryPolicy",
                          + "ecr:DescribeRepositories",
                          + "ecr:ListImages",
                          + "ecr:BatchGetImage",
                        ]
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = (known after apply)
    }

  # module.aws-iam.aws_iam_role_policy.kube_control_plane will be created
  + resource "aws_iam_role_policy" "kube_control_plane" {
      + id     = (known after apply)
      + name   = "kubernetes-k8s-kubespray-master"
      + policy = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "ec2:*",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "*",
                        ]
                    },
                  + {
                      + Action   = [
                          + "elasticloadbalancing:*",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "*",
                        ]
                    },
                  + {
                      + Action   = [
                          + "route53:*",
                        ]
                      + Effect   = "Allow"
                      + Resource = [
                          + "*",
                        ]
                    },
                  + {
                      + Action   = "s3:*"
                      + Effect   = "Allow"
                      + Resource = [
                          + "arn:aws:s3:::kubernetes-*",
                        ]
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role   = (known after apply)
    }

  # module.aws-nlb.aws_lb.aws-nlb-api will be created
  + resource "aws_lb" "aws-nlb-api" {
      + arn                              = (known after apply)
      + arn_suffix                       = (known after apply)
      + dns_name                         = (known after apply)
      + enable_cross_zone_load_balancing = true
      + enable_deletion_protection       = false
      + id                               = (known after apply)
      + internal                         = (known after apply)
      + ip_address_type                  = (known after apply)
      + load_balancer_type               = "network"
      + name                             = "kubernetes-nlb-k8s-kubespray"
      + security_groups                  = (known after apply)
      + subnets                          = (known after apply)
      + tags                             = {
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-nlb-api"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
        }
      + tags_all                         = {
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-nlb-api"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
        }
      + vpc_id                           = (known after apply)
      + zone_id                          = (known after apply)

      + subnet_mapping {
          + allocation_id        = (known after apply)
          + ipv6_address         = (known after apply)
          + outpost_id           = (known after apply)
          + private_ipv4_address = (known after apply)
          + subnet_id            = (known after apply)
        }
    }

  # module.aws-nlb.aws_lb_listener.aws-nlb-api-listener will be created
  + resource "aws_lb_listener" "aws-nlb-api-listener" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + load_balancer_arn = (known after apply)
      + port              = 6443
      + protocol          = "TCP"
      + ssl_policy        = (known after apply)
      + tags_all          = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }
    }

  # module.aws-nlb.aws_lb_target_group.aws-nlb-api-tg will be created
  + resource "aws_lb_target_group" "aws-nlb-api-tg" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = false
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancing_algorithm_type      = (known after apply)
      + name                               = "kubernetes-nlb-tg-k8s-kubespray"
      + port                               = 6443
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "TCP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "ip"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 2
          + interval            = 30
          + matcher             = (known after apply)
          + path                = "/healthz"
          + port                = "traffic-port"
          + protocol            = "HTTPS"
          + timeout             = (known after apply)
          + unhealthy_threshold = 2
        }

      + stickiness {
          + cookie_duration = (known after apply)
          + cookie_name     = (known after apply)
          + enabled         = (known after apply)
          + type            = (known after apply)
        }
    }

  # module.aws-vpc.aws_eip.cluster-nat-eip[0] will be created
  + resource "aws_eip" "cluster-nat-eip" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags_all             = (known after apply)
      + vpc                  = true
    }

  # module.aws-vpc.aws_eip.cluster-nat-eip[1] will be created
  + resource "aws_eip" "cluster-nat-eip" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags_all             = (known after apply)
      + vpc                  = true
    }

  # module.aws-vpc.aws_internet_gateway.cluster-vpc-internetgw will be created
  + resource "aws_internet_gateway" "cluster-vpc-internetgw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-internetgw"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
        }
      + tags_all = {
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-internetgw"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
        }
      + vpc_id   = (known after apply)
    }

  # module.aws-vpc.aws_nat_gateway.cluster-nat-gateway[0] will be created
  + resource "aws_nat_gateway" "cluster-nat-gateway" {
      + allocation_id        = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags_all             = (known after apply)
    }

  # module.aws-vpc.aws_nat_gateway.cluster-nat-gateway[1] will be created
  + resource "aws_nat_gateway" "cluster-nat-gateway" {
      + allocation_id        = (known after apply)
      + connectivity_type    = "public"
      + id                   = (known after apply)
      + network_interface_id = (known after apply)
      + private_ip           = (known after apply)
      + public_ip            = (known after apply)
      + subnet_id            = (known after apply)
      + tags_all             = (known after apply)
    }

  # module.aws-vpc.aws_route_table.kubernetes-private[0] will be created
  + resource "aws_route_table" "kubernetes-private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = ""
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = (known after apply)
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-routetable-private-0"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
        }
      + tags_all         = {
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-routetable-private-0"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
        }
      + vpc_id           = (known after apply)
    }

  # module.aws-vpc.aws_route_table.kubernetes-private[1] will be created
  + resource "aws_route_table" "kubernetes-private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = ""
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = (known after apply)
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-routetable-private-1"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
        }
      + tags_all         = {
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-routetable-private-1"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
        }
      + vpc_id           = (known after apply)
    }

  # module.aws-vpc.aws_route_table.kubernetes-public will be created
  + resource "aws_route_table" "kubernetes-public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-routetable-public"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
        }
      + tags_all         = {
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-routetable-public"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
        }
      + vpc_id           = (known after apply)
    }

  # module.aws-vpc.aws_route_table_association.kubernetes-private[0] will be created
  + resource "aws_route_table_association" "kubernetes-private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.aws-vpc.aws_route_table_association.kubernetes-private[1] will be created
  + resource "aws_route_table_association" "kubernetes-private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.aws-vpc.aws_route_table_association.kubernetes-public[0] will be created
  + resource "aws_route_table_association" "kubernetes-public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.aws-vpc.aws_route_table_association.kubernetes-public[1] will be created
  + resource "aws_route_table_association" "kubernetes-public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.aws-vpc.aws_security_group.kubernetes will be created
  + resource "aws_security_group" "kubernetes" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = (known after apply)
      + id                     = (known after apply)
      + ingress                = (known after apply)
      + name                   = "kubernetes-k8s-kubespray-securitygroup"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-securitygroup"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
        }
      + tags_all               = {
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-securitygroup"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
        }
      + vpc_id                 = (known after apply)
    }

  # module.aws-vpc.aws_security_group_rule.allow-all-egress will be created
  + resource "aws_security_group_rule" "allow-all-egress" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 65535
      + type                     = "egress"
    }

  # module.aws-vpc.aws_security_group_rule.allow-all-ingress will be created
  + resource "aws_security_group_rule" "allow-all-ingress" {
      + cidr_blocks              = [
          + "10.250.192.0/18",
        ]
      + from_port                = 0
      + id                       = (known after apply)
      + protocol                 = "-1"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 65535
      + type                     = "ingress"
    }

  # module.aws-vpc.aws_security_group_rule.allow-ssh-connections will be created
  + resource "aws_security_group_rule" "allow-ssh-connections" {
      + cidr_blocks              = [
          + "0.0.0.0/0",
        ]
      + from_port                = 22
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "ingress"
    }

  # module.aws-vpc.aws_subnet.cluster-vpc-subnets-private[0] will be created
  + resource "aws_subnet" "cluster-vpc-subnets-private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.250.192.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-us-east-1a-private"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "kubernetes.io/cluster/k8s-kubespray" = "shared"
          + "kubernetes.io/role/internal-elb"     = "1"
        }
      + tags_all                                       = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-us-east-1a-private"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "kubernetes.io/cluster/k8s-kubespray" = "shared"
          + "kubernetes.io/role/internal-elb"     = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.aws-vpc.aws_subnet.cluster-vpc-subnets-private[1] will be created
  + resource "aws_subnet" "cluster-vpc-subnets-private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.250.208.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-us-east-1b-private"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "kubernetes.io/cluster/k8s-kubespray" = "shared"
          + "kubernetes.io/role/internal-elb"     = "1"
        }
      + tags_all                                       = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-us-east-1b-private"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "kubernetes.io/cluster/k8s-kubespray" = "shared"
          + "kubernetes.io/role/internal-elb"     = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.aws-vpc.aws_subnet.cluster-vpc-subnets-public[0] will be created
  + resource "aws_subnet" "cluster-vpc-subnets-public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.250.224.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-us-east-1a-public"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "kubernetes.io/cluster/k8s-kubespray" = "shared"
          + "kubernetes.io/role/elb"              = "1"
        }
      + tags_all                                       = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-us-east-1a-public"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "kubernetes.io/cluster/k8s-kubespray" = "shared"
          + "kubernetes.io/role/elb"              = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.aws-vpc.aws_subnet.cluster-vpc-subnets-public[1] will be created
  + resource "aws_subnet" "cluster-vpc-subnets-public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-east-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.250.240.0/20"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-us-east-1b-public"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "kubernetes.io/cluster/k8s-kubespray" = "shared"
          + "kubernetes.io/role/elb"              = "1"
        }
      + tags_all                                       = {
          + "Cost-Center"                         = "PS"
          + "Name"                                = "kubernetes-k8s-kubespray-us-east-1b-public"
          + "Owner"                               = "amithtkm"
          + "Project"                             = "Kubernetes DR testing"
          + "kubernetes.io/cluster/k8s-kubespray" = "shared"
          + "kubernetes.io/role/elb"              = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.aws-vpc.aws_vpc.cluster-vpc will be created
  + resource "aws_vpc" "cluster-vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.250.192.0/18"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-vpc"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
        }
      + tags_all                             = {
          + "Cost-Center" = "PS"
          + "Name"        = "kubernetes-k8s-kubespray-vpc"
          + "Owner"       = "amithtkm"
          + "Project"     = "Kubernetes DR testing"
        }
    }

Plan: 44 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + aws_nlb_api_fqdn = (known after apply)
  + bastion_ip       = (known after apply)
  + default_tags     = {
      + "Cost-Center" = "PS"
      + "Owner"       = "amithtkm"
      + "Project"     = "Kubernetes DR testing"
    }
  + etcd             = (known after apply)
  + inventory        = (known after apply)
  + masters          = (known after apply)
  + workers          = (known after apply)
